/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IMemeFactory {
  export type MemeCreationParamsStruct = {
    name: string;
    symbol: string;
    tokenId: BigNumberish;
    initialDeposit: BigNumberish;
    whitelistStartTs: BigNumberish;
    whitelistEndTs: BigNumberish;
    stakeEndTs: BigNumberish;
    lockEndTs: BigNumberish;
    lockedToken: AddressLike;
    native: AddressLike;
    creator: AddressLike;
  };

  export type MemeCreationParamsStructOutput = [
    name: string,
    symbol: string,
    tokenId: bigint,
    initialDeposit: bigint,
    whitelistStartTs: bigint,
    whitelistEndTs: bigint,
    stakeEndTs: bigint,
    lockEndTs: bigint,
    lockedToken: string,
    native: string,
    creator: string
  ] & {
    name: string;
    symbol: string;
    tokenId: bigint;
    initialDeposit: bigint;
    whitelistStartTs: bigint;
    whitelistEndTs: bigint;
    stakeEndTs: bigint;
    lockEndTs: bigint;
    lockedToken: string;
    native: string;
    creator: string;
  };

  export type InitializationParamsStruct = {
    memeImplementation: AddressLike;
    vaultImplementation: AddressLike;
    uniswapV3Factory: AddressLike;
    migratorAddress: AddressLike;
    signerAddress: AddressLike;
    treasury1: AddressLike;
    treasury2: AddressLike;
    supplyReserveTreasury: AddressLike;
    tradingFeeRate: BigNumberish;
    treasury1FeeCommission: BigNumberish;
    listingFeeRate: BigNumberish;
  };

  export type InitializationParamsStructOutput = [
    memeImplementation: string,
    vaultImplementation: string,
    uniswapV3Factory: string,
    migratorAddress: string,
    signerAddress: string,
    treasury1: string,
    treasury2: string,
    supplyReserveTreasury: string,
    tradingFeeRate: bigint,
    treasury1FeeCommission: bigint,
    listingFeeRate: bigint
  ] & {
    memeImplementation: string;
    vaultImplementation: string;
    uniswapV3Factory: string;
    migratorAddress: string;
    signerAddress: string;
    treasury1: string;
    treasury2: string;
    supplyReserveTreasury: string;
    tradingFeeRate: bigint;
    treasury1FeeCommission: bigint;
    listingFeeRate: bigint;
  };

  export type BondingCurveConfigStruct = {
    creationFee: BigNumberish;
    totalSupply: BigNumberish;
    saleAmount: BigNumberish;
    tokenOffset: BigNumberish;
    nativeOffset: BigNumberish;
    reservedSupply: BigNumberish;
    token0ListingSqrtPriceX96: BigNumberish;
    token1ListingSqrtPriceX96: BigNumberish;
    listingFeeTier: BigNumberish;
  };

  export type BondingCurveConfigStructOutput = [
    creationFee: bigint,
    totalSupply: bigint,
    saleAmount: bigint,
    tokenOffset: bigint,
    nativeOffset: bigint,
    reservedSupply: bigint,
    token0ListingSqrtPriceX96: bigint,
    token1ListingSqrtPriceX96: bigint,
    listingFeeTier: bigint
  ] & {
    creationFee: bigint;
    totalSupply: bigint;
    saleAmount: bigint;
    tokenOffset: bigint;
    nativeOffset: bigint;
    reservedSupply: bigint;
    token0ListingSqrtPriceX96: bigint;
    token1ListingSqrtPriceX96: bigint;
    listingFeeTier: bigint;
  };
}

export interface MemeFactoryV2Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "BASIS_POINTS"
      | "bondingCurveConfig"
      | "createMeme"
      | "createMemeWithoutLaunching"
      | "dummy"
      | "forLaunching"
      | "getLockVaultAddress"
      | "getMemeAddress"
      | "getPumpContractAddress"
      | "initialize"
      | "initializeWithoutLaunching"
      | "listingFeeRate"
      | "lockVaultBeacon"
      | "memeBeacon"
      | "migratorAddress"
      | "owner"
      | "proxiableUUID"
      | "renounceOwnership"
      | "setCurveConfiguration"
      | "setForLaunching"
      | "setListingFeeRate"
      | "setMemeImplementation"
      | "setMigratorAddress"
      | "setSignerAddress"
      | "setSupplyReserveTreasury"
      | "setTradingFeeRate"
      | "setTreasury1"
      | "setTreasury2"
      | "setUniV3Factory"
      | "setVaultImplementation"
      | "settreasury1FeeCommission"
      | "signerAddress"
      | "supplyReserveTreasury"
      | "tradingFeeRate"
      | "transferOwnership"
      | "treasury1"
      | "treasury1FeeCommission"
      | "treasury2"
      | "uniswapV3Factory"
      | "upgradeTo"
      | "upgradeToAndCall"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminChanged"
      | "BeaconUpgraded"
      | "ConfigurationSet"
      | "CreationFeeCollected"
      | "CurveSet"
      | "DistributeSupplyToStakers"
      | "FeeConfigurationSet"
      | "Initialized"
      | "LockVaultCreated"
      | "MemeCreated"
      | "MemeCreatedWithoutLaunching"
      | "MemeImplementationSet"
      | "OwnershipTransferred"
      | "Upgraded"
      | "VaultImplementationSet"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BASIS_POINTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bondingCurveConfig",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createMeme",
    values: [IMemeFactory.MemeCreationParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createMemeWithoutLaunching",
    values: [string, string, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "dummy", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "forLaunching",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLockVaultAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMemeAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPumpContractAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [IMemeFactory.InitializationParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeWithoutLaunching",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "listingFeeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockVaultBeacon",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "memeBeacon",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "migratorAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCurveConfiguration",
    values: [AddressLike, IMemeFactory.BondingCurveConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setForLaunching",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setListingFeeRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMemeImplementation",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMigratorAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSignerAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSupplyReserveTreasury",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTradingFeeRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasury1",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasury2",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setUniV3Factory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setVaultImplementation",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "settreasury1FeeCommission",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "signerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supplyReserveTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tradingFeeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "treasury1", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "treasury1FeeCommission",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "treasury2", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "uniswapV3Factory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "BASIS_POINTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bondingCurveConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createMeme", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createMemeWithoutLaunching",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dummy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forLaunching",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLockVaultAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMemeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPumpContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeWithoutLaunching",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listingFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockVaultBeacon",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "memeBeacon", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "migratorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCurveConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setForLaunching",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setListingFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMemeImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMigratorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSignerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSupplyReserveTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTradingFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUniV3Factory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVaultImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settreasury1FeeCommission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supplyReserveTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradingFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury1", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "treasury1FeeCommission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3Factory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
}

export namespace AdminChangedEvent {
  export type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [previousAdmin: string, newAdmin: string];
  export interface OutputObject {
    previousAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeaconUpgradedEvent {
  export type InputTuple = [beacon: AddressLike];
  export type OutputTuple = [beacon: string];
  export interface OutputObject {
    beacon: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConfigurationSetEvent {
  export type InputTuple = [
    migratorAddress: AddressLike,
    signerAddress: AddressLike,
    uniswapV3Factory: AddressLike,
    forLaunching: boolean,
    factory: AddressLike
  ];
  export type OutputTuple = [
    migratorAddress: string,
    signerAddress: string,
    uniswapV3Factory: string,
    forLaunching: boolean,
    factory: string
  ];
  export interface OutputObject {
    migratorAddress: string;
    signerAddress: string;
    uniswapV3Factory: string;
    forLaunching: boolean;
    factory: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreationFeeCollectedEvent {
  export type InputTuple = [
    token: AddressLike,
    native: AddressLike,
    treasury1: AddressLike,
    treasury2: AddressLike,
    totalFee: BigNumberish,
    feeForTreasury1: BigNumberish,
    feeForTreasury2: BigNumberish,
    factory: AddressLike
  ];
  export type OutputTuple = [
    token: string,
    native: string,
    treasury1: string,
    treasury2: string,
    totalFee: bigint,
    feeForTreasury1: bigint,
    feeForTreasury2: bigint,
    factory: string
  ];
  export interface OutputObject {
    token: string;
    native: string;
    treasury1: string;
    treasury2: string;
    totalFee: bigint;
    feeForTreasury1: bigint;
    feeForTreasury2: bigint;
    factory: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CurveSetEvent {
  export type InputTuple = [
    native: AddressLike,
    creationFee: BigNumberish,
    totalSupply: BigNumberish,
    saleAmount: BigNumberish,
    tokenOffset: BigNumberish,
    nativeOffset: BigNumberish,
    reservedSupply: BigNumberish,
    token0ListingSqrtPriceX96: BigNumberish,
    token1ListingSqrtPriceX96: BigNumberish,
    listingFeeTier: BigNumberish,
    factory: AddressLike
  ];
  export type OutputTuple = [
    native: string,
    creationFee: bigint,
    totalSupply: bigint,
    saleAmount: bigint,
    tokenOffset: bigint,
    nativeOffset: bigint,
    reservedSupply: bigint,
    token0ListingSqrtPriceX96: bigint,
    token1ListingSqrtPriceX96: bigint,
    listingFeeTier: bigint,
    factory: string
  ];
  export interface OutputObject {
    native: string;
    creationFee: bigint;
    totalSupply: bigint;
    saleAmount: bigint;
    tokenOffset: bigint;
    nativeOffset: bigint;
    reservedSupply: bigint;
    token0ListingSqrtPriceX96: bigint;
    token1ListingSqrtPriceX96: bigint;
    listingFeeTier: bigint;
    factory: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DistributeSupplyToStakersEvent {
  export type InputTuple = [
    token: AddressLike,
    treasury: AddressLike,
    amount: BigNumberish,
    factory: AddressLike
  ];
  export type OutputTuple = [
    token: string,
    treasury: string,
    amount: bigint,
    factory: string
  ];
  export interface OutputObject {
    token: string;
    treasury: string;
    amount: bigint;
    factory: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeConfigurationSetEvent {
  export type InputTuple = [
    treasury1: AddressLike,
    treasury2: AddressLike,
    supplyReserveTreasury: AddressLike,
    tradingFeeRate: BigNumberish,
    treasury1FeeCommission: BigNumberish,
    listingFeeRate: BigNumberish,
    factory: AddressLike
  ];
  export type OutputTuple = [
    treasury1: string,
    treasury2: string,
    supplyReserveTreasury: string,
    tradingFeeRate: bigint,
    treasury1FeeCommission: bigint,
    listingFeeRate: bigint,
    factory: string
  ];
  export interface OutputObject {
    treasury1: string;
    treasury2: string;
    supplyReserveTreasury: string;
    tradingFeeRate: bigint;
    treasury1FeeCommission: bigint;
    listingFeeRate: bigint;
    factory: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LockVaultCreatedEvent {
  export type InputTuple = [
    token: AddressLike,
    lockedToken: AddressLike,
    vault: AddressLike,
    tokenId: BigNumberish,
    stakeEndTime: BigNumberish,
    lockEndTime: BigNumberish,
    factory: AddressLike
  ];
  export type OutputTuple = [
    token: string,
    lockedToken: string,
    vault: string,
    tokenId: bigint,
    stakeEndTime: bigint,
    lockEndTime: bigint,
    factory: string
  ];
  export interface OutputObject {
    token: string;
    lockedToken: string;
    vault: string;
    tokenId: bigint;
    stakeEndTime: bigint;
    lockEndTime: bigint;
    factory: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MemeCreatedEvent {
  export type InputTuple = [
    token: AddressLike,
    meme: AddressLike,
    creator: AddressLike,
    native: AddressLike,
    totalSupply: BigNumberish,
    saleAmount: BigNumberish,
    reservedSupply: BigNumberish,
    tokenOffset: BigNumberish,
    nativeOffset: BigNumberish,
    tokenId: BigNumberish,
    factory: AddressLike
  ];
  export type OutputTuple = [
    token: string,
    meme: string,
    creator: string,
    native: string,
    totalSupply: bigint,
    saleAmount: bigint,
    reservedSupply: bigint,
    tokenOffset: bigint,
    nativeOffset: bigint,
    tokenId: bigint,
    factory: string
  ];
  export interface OutputObject {
    token: string;
    meme: string;
    creator: string;
    native: string;
    totalSupply: bigint;
    saleAmount: bigint;
    reservedSupply: bigint;
    tokenOffset: bigint;
    nativeOffset: bigint;
    tokenId: bigint;
    factory: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MemeCreatedWithoutLaunchingEvent {
  export type InputTuple = [
    token: AddressLike,
    tokenId: BigNumberish,
    factory: AddressLike
  ];
  export type OutputTuple = [token: string, tokenId: bigint, factory: string];
  export interface OutputObject {
    token: string;
    tokenId: bigint;
    factory: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MemeImplementationSetEvent {
  export type InputTuple = [arg0: AddressLike, factory: AddressLike];
  export type OutputTuple = [arg0: string, factory: string];
  export interface OutputObject {
    arg0: string;
    factory: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VaultImplementationSetEvent {
  export type InputTuple = [arg0: AddressLike, factory: AddressLike];
  export type OutputTuple = [arg0: string, factory: string];
  export interface OutputObject {
    arg0: string;
    factory: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MemeFactoryV2 extends BaseContract {
  connect(runner?: ContractRunner | null): MemeFactoryV2;
  waitForDeployment(): Promise<this>;

  interface: MemeFactoryV2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BASIS_POINTS: TypedContractMethod<[], [bigint], "view">;

  bondingCurveConfig: TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        creationFee: bigint;
        totalSupply: bigint;
        saleAmount: bigint;
        tokenOffset: bigint;
        nativeOffset: bigint;
        reservedSupply: bigint;
        token0ListingSqrtPriceX96: bigint;
        token1ListingSqrtPriceX96: bigint;
        listingFeeTier: bigint;
      }
    ],
    "view"
  >;

  createMeme: TypedContractMethod<
    [params: IMemeFactory.MemeCreationParamsStruct],
    [[string, string] & { token: string; meme: string }],
    "nonpayable"
  >;

  createMemeWithoutLaunching: TypedContractMethod<
    [
      _name: string,
      _symbol: string,
      _tokenId: BigNumberish,
      _totalSupply: BigNumberish,
      _supplyRecipient: AddressLike
    ],
    [string],
    "nonpayable"
  >;

  dummy: TypedContractMethod<[], [bigint], "view">;

  forLaunching: TypedContractMethod<[], [boolean], "view">;

  getLockVaultAddress: TypedContractMethod<
    [tokenAddress: AddressLike],
    [string],
    "view"
  >;

  getMemeAddress: TypedContractMethod<
    [_tokenId: BigNumberish],
    [string],
    "view"
  >;

  getPumpContractAddress: TypedContractMethod<
    [tokenAddress: AddressLike],
    [string],
    "view"
  >;

  initialize: TypedContractMethod<
    [params: IMemeFactory.InitializationParamsStruct],
    [void],
    "nonpayable"
  >;

  initializeWithoutLaunching: TypedContractMethod<[], [void], "nonpayable">;

  listingFeeRate: TypedContractMethod<[], [bigint], "view">;

  lockVaultBeacon: TypedContractMethod<[], [string], "view">;

  memeBeacon: TypedContractMethod<[], [string], "view">;

  migratorAddress: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setCurveConfiguration: TypedContractMethod<
    [native: AddressLike, config: IMemeFactory.BondingCurveConfigStruct],
    [void],
    "nonpayable"
  >;

  setForLaunching: TypedContractMethod<
    [_forLaunching: boolean],
    [void],
    "nonpayable"
  >;

  setListingFeeRate: TypedContractMethod<
    [_listingFeeRate: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMemeImplementation: TypedContractMethod<
    [_implementation: AddressLike],
    [void],
    "nonpayable"
  >;

  setMigratorAddress: TypedContractMethod<
    [_migrator: AddressLike],
    [void],
    "nonpayable"
  >;

  setSignerAddress: TypedContractMethod<
    [_signer: AddressLike],
    [void],
    "nonpayable"
  >;

  setSupplyReserveTreasury: TypedContractMethod<
    [_supplyReserveTreasury: AddressLike],
    [void],
    "nonpayable"
  >;

  setTradingFeeRate: TypedContractMethod<
    [_tradingFeeRate: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTreasury1: TypedContractMethod<
    [_treasury1: AddressLike],
    [void],
    "nonpayable"
  >;

  setTreasury2: TypedContractMethod<
    [_treasury2: AddressLike],
    [void],
    "nonpayable"
  >;

  setUniV3Factory: TypedContractMethod<
    [_univ3Factory: AddressLike],
    [void],
    "nonpayable"
  >;

  setVaultImplementation: TypedContractMethod<
    [_implementation: AddressLike],
    [void],
    "nonpayable"
  >;

  settreasury1FeeCommission: TypedContractMethod<
    [_treasury1FeeCommission: BigNumberish],
    [void],
    "nonpayable"
  >;

  signerAddress: TypedContractMethod<[], [string], "view">;

  supplyReserveTreasury: TypedContractMethod<[], [string], "view">;

  tradingFeeRate: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  treasury1: TypedContractMethod<[], [string], "view">;

  treasury1FeeCommission: TypedContractMethod<[], [bigint], "view">;

  treasury2: TypedContractMethod<[], [string], "view">;

  uniswapV3Factory: TypedContractMethod<[], [string], "view">;

  upgradeTo: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BASIS_POINTS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "bondingCurveConfig"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        creationFee: bigint;
        totalSupply: bigint;
        saleAmount: bigint;
        tokenOffset: bigint;
        nativeOffset: bigint;
        reservedSupply: bigint;
        token0ListingSqrtPriceX96: bigint;
        token1ListingSqrtPriceX96: bigint;
        listingFeeTier: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "createMeme"
  ): TypedContractMethod<
    [params: IMemeFactory.MemeCreationParamsStruct],
    [[string, string] & { token: string; meme: string }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createMemeWithoutLaunching"
  ): TypedContractMethod<
    [
      _name: string,
      _symbol: string,
      _tokenId: BigNumberish,
      _totalSupply: BigNumberish,
      _supplyRecipient: AddressLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "dummy"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "forLaunching"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "getLockVaultAddress"
  ): TypedContractMethod<[tokenAddress: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getMemeAddress"
  ): TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getPumpContractAddress"
  ): TypedContractMethod<[tokenAddress: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [params: IMemeFactory.InitializationParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initializeWithoutLaunching"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "listingFeeRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lockVaultBeacon"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "memeBeacon"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "migratorAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCurveConfiguration"
  ): TypedContractMethod<
    [native: AddressLike, config: IMemeFactory.BondingCurveConfigStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setForLaunching"
  ): TypedContractMethod<[_forLaunching: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setListingFeeRate"
  ): TypedContractMethod<[_listingFeeRate: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMemeImplementation"
  ): TypedContractMethod<[_implementation: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMigratorAddress"
  ): TypedContractMethod<[_migrator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSignerAddress"
  ): TypedContractMethod<[_signer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSupplyReserveTreasury"
  ): TypedContractMethod<
    [_supplyReserveTreasury: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTradingFeeRate"
  ): TypedContractMethod<[_tradingFeeRate: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTreasury1"
  ): TypedContractMethod<[_treasury1: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTreasury2"
  ): TypedContractMethod<[_treasury2: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setUniV3Factory"
  ): TypedContractMethod<[_univ3Factory: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setVaultImplementation"
  ): TypedContractMethod<[_implementation: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "settreasury1FeeCommission"
  ): TypedContractMethod<
    [_treasury1FeeCommission: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "signerAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "supplyReserveTreasury"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tradingFeeRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "treasury1"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "treasury1FeeCommission"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "treasury2"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "uniswapV3Factory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "upgradeTo"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getEvent(
    key: "AdminChanged"
  ): TypedContractEvent<
    AdminChangedEvent.InputTuple,
    AdminChangedEvent.OutputTuple,
    AdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "BeaconUpgraded"
  ): TypedContractEvent<
    BeaconUpgradedEvent.InputTuple,
    BeaconUpgradedEvent.OutputTuple,
    BeaconUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "ConfigurationSet"
  ): TypedContractEvent<
    ConfigurationSetEvent.InputTuple,
    ConfigurationSetEvent.OutputTuple,
    ConfigurationSetEvent.OutputObject
  >;
  getEvent(
    key: "CreationFeeCollected"
  ): TypedContractEvent<
    CreationFeeCollectedEvent.InputTuple,
    CreationFeeCollectedEvent.OutputTuple,
    CreationFeeCollectedEvent.OutputObject
  >;
  getEvent(
    key: "CurveSet"
  ): TypedContractEvent<
    CurveSetEvent.InputTuple,
    CurveSetEvent.OutputTuple,
    CurveSetEvent.OutputObject
  >;
  getEvent(
    key: "DistributeSupplyToStakers"
  ): TypedContractEvent<
    DistributeSupplyToStakersEvent.InputTuple,
    DistributeSupplyToStakersEvent.OutputTuple,
    DistributeSupplyToStakersEvent.OutputObject
  >;
  getEvent(
    key: "FeeConfigurationSet"
  ): TypedContractEvent<
    FeeConfigurationSetEvent.InputTuple,
    FeeConfigurationSetEvent.OutputTuple,
    FeeConfigurationSetEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "LockVaultCreated"
  ): TypedContractEvent<
    LockVaultCreatedEvent.InputTuple,
    LockVaultCreatedEvent.OutputTuple,
    LockVaultCreatedEvent.OutputObject
  >;
  getEvent(
    key: "MemeCreated"
  ): TypedContractEvent<
    MemeCreatedEvent.InputTuple,
    MemeCreatedEvent.OutputTuple,
    MemeCreatedEvent.OutputObject
  >;
  getEvent(
    key: "MemeCreatedWithoutLaunching"
  ): TypedContractEvent<
    MemeCreatedWithoutLaunchingEvent.InputTuple,
    MemeCreatedWithoutLaunchingEvent.OutputTuple,
    MemeCreatedWithoutLaunchingEvent.OutputObject
  >;
  getEvent(
    key: "MemeImplementationSet"
  ): TypedContractEvent<
    MemeImplementationSetEvent.InputTuple,
    MemeImplementationSetEvent.OutputTuple,
    MemeImplementationSetEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;
  getEvent(
    key: "VaultImplementationSet"
  ): TypedContractEvent<
    VaultImplementationSetEvent.InputTuple,
    VaultImplementationSetEvent.OutputTuple,
    VaultImplementationSetEvent.OutputObject
  >;

  filters: {
    "AdminChanged(address,address)": TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;
    AdminChanged: TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;

    "BeaconUpgraded(address)": TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;
    BeaconUpgraded: TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;

    "ConfigurationSet(address,address,address,bool,address)": TypedContractEvent<
      ConfigurationSetEvent.InputTuple,
      ConfigurationSetEvent.OutputTuple,
      ConfigurationSetEvent.OutputObject
    >;
    ConfigurationSet: TypedContractEvent<
      ConfigurationSetEvent.InputTuple,
      ConfigurationSetEvent.OutputTuple,
      ConfigurationSetEvent.OutputObject
    >;

    "CreationFeeCollected(address,address,address,address,uint256,uint256,uint256,address)": TypedContractEvent<
      CreationFeeCollectedEvent.InputTuple,
      CreationFeeCollectedEvent.OutputTuple,
      CreationFeeCollectedEvent.OutputObject
    >;
    CreationFeeCollected: TypedContractEvent<
      CreationFeeCollectedEvent.InputTuple,
      CreationFeeCollectedEvent.OutputTuple,
      CreationFeeCollectedEvent.OutputObject
    >;

    "CurveSet(address,uint256,uint256,uint256,uint256,uint256,uint256,uint160,uint160,uint24,address)": TypedContractEvent<
      CurveSetEvent.InputTuple,
      CurveSetEvent.OutputTuple,
      CurveSetEvent.OutputObject
    >;
    CurveSet: TypedContractEvent<
      CurveSetEvent.InputTuple,
      CurveSetEvent.OutputTuple,
      CurveSetEvent.OutputObject
    >;

    "DistributeSupplyToStakers(address,address,uint256,address)": TypedContractEvent<
      DistributeSupplyToStakersEvent.InputTuple,
      DistributeSupplyToStakersEvent.OutputTuple,
      DistributeSupplyToStakersEvent.OutputObject
    >;
    DistributeSupplyToStakers: TypedContractEvent<
      DistributeSupplyToStakersEvent.InputTuple,
      DistributeSupplyToStakersEvent.OutputTuple,
      DistributeSupplyToStakersEvent.OutputObject
    >;

    "FeeConfigurationSet(address,address,address,uint256,uint256,uint256,address)": TypedContractEvent<
      FeeConfigurationSetEvent.InputTuple,
      FeeConfigurationSetEvent.OutputTuple,
      FeeConfigurationSetEvent.OutputObject
    >;
    FeeConfigurationSet: TypedContractEvent<
      FeeConfigurationSetEvent.InputTuple,
      FeeConfigurationSetEvent.OutputTuple,
      FeeConfigurationSetEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "LockVaultCreated(address,address,address,uint256,uint256,uint256,address)": TypedContractEvent<
      LockVaultCreatedEvent.InputTuple,
      LockVaultCreatedEvent.OutputTuple,
      LockVaultCreatedEvent.OutputObject
    >;
    LockVaultCreated: TypedContractEvent<
      LockVaultCreatedEvent.InputTuple,
      LockVaultCreatedEvent.OutputTuple,
      LockVaultCreatedEvent.OutputObject
    >;

    "MemeCreated(address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,address)": TypedContractEvent<
      MemeCreatedEvent.InputTuple,
      MemeCreatedEvent.OutputTuple,
      MemeCreatedEvent.OutputObject
    >;
    MemeCreated: TypedContractEvent<
      MemeCreatedEvent.InputTuple,
      MemeCreatedEvent.OutputTuple,
      MemeCreatedEvent.OutputObject
    >;

    "MemeCreatedWithoutLaunching(address,uint256,address)": TypedContractEvent<
      MemeCreatedWithoutLaunchingEvent.InputTuple,
      MemeCreatedWithoutLaunchingEvent.OutputTuple,
      MemeCreatedWithoutLaunchingEvent.OutputObject
    >;
    MemeCreatedWithoutLaunching: TypedContractEvent<
      MemeCreatedWithoutLaunchingEvent.InputTuple,
      MemeCreatedWithoutLaunchingEvent.OutputTuple,
      MemeCreatedWithoutLaunchingEvent.OutputObject
    >;

    "MemeImplementationSet(address,address)": TypedContractEvent<
      MemeImplementationSetEvent.InputTuple,
      MemeImplementationSetEvent.OutputTuple,
      MemeImplementationSetEvent.OutputObject
    >;
    MemeImplementationSet: TypedContractEvent<
      MemeImplementationSetEvent.InputTuple,
      MemeImplementationSetEvent.OutputTuple,
      MemeImplementationSetEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;

    "VaultImplementationSet(address,address)": TypedContractEvent<
      VaultImplementationSetEvent.InputTuple,
      VaultImplementationSetEvent.OutputTuple,
      VaultImplementationSetEvent.OutputObject
    >;
    VaultImplementationSet: TypedContractEvent<
      VaultImplementationSetEvent.InputTuple,
      VaultImplementationSetEvent.OutputTuple,
      VaultImplementationSetEvent.OutputObject
    >;
  };
}
