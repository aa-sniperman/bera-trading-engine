/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IDojoSwapV2Router {
  export type NftVaultLiquidityDataStruct = {
    token: AddressLike;
    collection: AddressLike[];
    tokenId: BigNumberish[];
    amount: BigNumberish[];
  };

  export type NftVaultLiquidityDataStructOutput = [
    token: string,
    collection: string[],
    tokenId: bigint[],
    amount: bigint[]
  ] & {
    token: string;
    collection: string[];
    tokenId: bigint[];
    amount: bigint[];
  };
}

export interface DojoRouterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BURN_ADDRESS"
      | "ONE"
      | "WETH"
      | "addLiquidity"
      | "addLiquidityETH"
      | "addLiquidityNFT"
      | "addLiquidityNFTETH"
      | "addLiquidityNFTNFT"
      | "depositVault"
      | "factory"
      | "getAmountIn"
      | "getAmountOut"
      | "getAmountsIn"
      | "getAmountsOut"
      | "pairFor"
      | "quote"
      | "removeLiquidity"
      | "removeLiquidityETH"
      | "removeLiquidityETHWithPermit"
      | "removeLiquidityNFT"
      | "removeLiquidityNFTETH"
      | "removeLiquidityNFTNFT"
      | "removeLiquidityWithPermit"
      | "swapETHForExactTokens"
      | "swapETHForNft"
      | "swapExactETHForTokens"
      | "swapExactTokensForETH"
      | "swapExactTokensForTokens"
      | "swapNftForETH"
      | "swapNftForNft"
      | "swapNftForTokens"
      | "swapTokensForExactETH"
      | "swapTokensForExactTokens"
      | "swapTokensForNft"
      | "withdrawVault"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "NFTLiquidityAdded"
      | "NFTLiquidityRemoved"
      | "NFTNFTLiquidityAdded"
      | "NFTNFTLiquidityRemoved"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BURN_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ONE", values?: undefined): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityETH",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityNFT",
    values: [
      IDojoSwapV2Router.NftVaultLiquidityDataStruct,
      AddressLike,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityNFTETH",
    values: [
      IDojoSwapV2Router.NftVaultLiquidityDataStruct,
      BigNumberish,
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityNFTNFT",
    values: [
      IDojoSwapV2Router.NftVaultLiquidityDataStruct,
      IDojoSwapV2Router.NftVaultLiquidityDataStruct,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositVault",
    values: [
      AddressLike[],
      BigNumberish[],
      BigNumberish[],
      AddressLike,
      AddressLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAmountIn",
    values: [BigNumberish, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountOut",
    values: [BigNumberish, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountsIn",
    values: [BigNumberish, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountsOut",
    values: [BigNumberish, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "pairFor",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "quote",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityETH",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityETHWithPermit",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish,
      boolean,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityNFT",
    values: [
      IDojoSwapV2Router.NftVaultLiquidityDataStruct,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityNFTETH",
    values: [
      IDojoSwapV2Router.NftVaultLiquidityDataStruct,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityNFTNFT",
    values: [
      IDojoSwapV2Router.NftVaultLiquidityDataStruct,
      IDojoSwapV2Router.NftVaultLiquidityDataStruct,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityWithPermit",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish,
      boolean,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapETHForExactTokens",
    values: [BigNumberish, AddressLike[], AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapETHForNft",
    values: [
      AddressLike[],
      BigNumberish[],
      BigNumberish[],
      AddressLike[],
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactETHForTokens",
    values: [BigNumberish, AddressLike[], AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForETH",
    values: [
      BigNumberish,
      BigNumberish,
      AddressLike[],
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForTokens",
    values: [
      BigNumberish,
      BigNumberish,
      AddressLike[],
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapNftForETH",
    values: [
      AddressLike[],
      BigNumberish[],
      BigNumberish[],
      BigNumberish,
      AddressLike[],
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapNftForNft",
    values: [
      AddressLike[],
      BigNumberish[],
      BigNumberish[],
      AddressLike[],
      BigNumberish[],
      BigNumberish[],
      AddressLike[],
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapNftForTokens",
    values: [
      AddressLike[],
      BigNumberish[],
      BigNumberish[],
      BigNumberish,
      AddressLike[],
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensForExactETH",
    values: [
      BigNumberish,
      BigNumberish,
      AddressLike[],
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensForExactTokens",
    values: [
      BigNumberish,
      BigNumberish,
      AddressLike[],
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensForNft",
    values: [
      AddressLike[],
      BigNumberish[],
      BigNumberish[],
      BigNumberish,
      AddressLike[],
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawVault",
    values: [
      AddressLike[],
      BigNumberish[],
      BigNumberish[],
      AddressLike,
      AddressLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "BURN_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ONE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityNFTETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityNFTNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAmountIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountsIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountsOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pairFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityETHWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityNFTETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityNFTNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapETHForExactTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapETHForNft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactETHForTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapNftForETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapNftForNft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapNftForTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensForExactETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensForExactTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensForNft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawVault",
    data: BytesLike
  ): Result;
}

export namespace NFTLiquidityAddedEvent {
  export type InputTuple = [
    to: AddressLike,
    pair: AddressLike,
    vault: IDojoSwapV2Router.NftVaultLiquidityDataStruct
  ];
  export type OutputTuple = [
    to: string,
    pair: string,
    vault: IDojoSwapV2Router.NftVaultLiquidityDataStructOutput
  ];
  export interface OutputObject {
    to: string;
    pair: string;
    vault: IDojoSwapV2Router.NftVaultLiquidityDataStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NFTLiquidityRemovedEvent {
  export type InputTuple = [
    to: AddressLike,
    pair: AddressLike,
    vault: IDojoSwapV2Router.NftVaultLiquidityDataStruct
  ];
  export type OutputTuple = [
    to: string,
    pair: string,
    vault: IDojoSwapV2Router.NftVaultLiquidityDataStructOutput
  ];
  export interface OutputObject {
    to: string;
    pair: string;
    vault: IDojoSwapV2Router.NftVaultLiquidityDataStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NFTNFTLiquidityAddedEvent {
  export type InputTuple = [
    to: AddressLike,
    pair: AddressLike,
    vaultA: IDojoSwapV2Router.NftVaultLiquidityDataStruct,
    vaultB: IDojoSwapV2Router.NftVaultLiquidityDataStruct
  ];
  export type OutputTuple = [
    to: string,
    pair: string,
    vaultA: IDojoSwapV2Router.NftVaultLiquidityDataStructOutput,
    vaultB: IDojoSwapV2Router.NftVaultLiquidityDataStructOutput
  ];
  export interface OutputObject {
    to: string;
    pair: string;
    vaultA: IDojoSwapV2Router.NftVaultLiquidityDataStructOutput;
    vaultB: IDojoSwapV2Router.NftVaultLiquidityDataStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NFTNFTLiquidityRemovedEvent {
  export type InputTuple = [
    to: AddressLike,
    pair: AddressLike,
    vaultA: IDojoSwapV2Router.NftVaultLiquidityDataStruct,
    vaultB: IDojoSwapV2Router.NftVaultLiquidityDataStruct
  ];
  export type OutputTuple = [
    to: string,
    pair: string,
    vaultA: IDojoSwapV2Router.NftVaultLiquidityDataStructOutput,
    vaultB: IDojoSwapV2Router.NftVaultLiquidityDataStructOutput
  ];
  export interface OutputObject {
    to: string;
    pair: string;
    vaultA: IDojoSwapV2Router.NftVaultLiquidityDataStructOutput;
    vaultB: IDojoSwapV2Router.NftVaultLiquidityDataStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DojoRouter extends BaseContract {
  connect(runner?: ContractRunner | null): DojoRouter;
  waitForDeployment(): Promise<this>;

  interface: DojoRouterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BURN_ADDRESS: TypedContractMethod<[], [string], "view">;

  ONE: TypedContractMethod<[], [bigint], "view">;

  WETH: TypedContractMethod<[], [string], "view">;

  addLiquidity: TypedContractMethod<
    [
      tokenA: AddressLike,
      tokenB: AddressLike,
      amountADesired: BigNumberish,
      amountBDesired: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: AddressLike,
      deadline: BigNumberish
    ],
    [
      [bigint, bigint, bigint] & {
        amountA: bigint;
        amountB: bigint;
        liquidity: bigint;
      }
    ],
    "nonpayable"
  >;

  addLiquidityETH: TypedContractMethod<
    [
      token: AddressLike,
      amountTokenDesired: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: AddressLike,
      deadline: BigNumberish
    ],
    [
      [bigint, bigint, bigint] & {
        amountToken: bigint;
        amountETH: bigint;
        liquidity: bigint;
      }
    ],
    "payable"
  >;

  addLiquidityNFT: TypedContractMethod<
    [
      _vault: IDojoSwapV2Router.NftVaultLiquidityDataStruct,
      _tokenB: AddressLike,
      _amountBDesired: BigNumberish,
      _amountBMin: BigNumberish,
      _to: AddressLike,
      _deadline: BigNumberish
    ],
    [
      [bigint, bigint, bigint] & {
        amountA: bigint;
        amountB: bigint;
        lpAmount: bigint;
      }
    ],
    "nonpayable"
  >;

  addLiquidityNFTETH: TypedContractMethod<
    [
      _vault: IDojoSwapV2Router.NftVaultLiquidityDataStruct,
      _amountETHMin: BigNumberish,
      _to: AddressLike,
      _deadline: BigNumberish
    ],
    [
      [bigint, bigint, bigint] & {
        amountToken: bigint;
        amountETH: bigint;
        lpAmount: bigint;
      }
    ],
    "payable"
  >;

  addLiquidityNFTNFT: TypedContractMethod<
    [
      _vaultA: IDojoSwapV2Router.NftVaultLiquidityDataStruct,
      _vaultB: IDojoSwapV2Router.NftVaultLiquidityDataStruct,
      _amountAMin: BigNumberish,
      _amountBMin: BigNumberish,
      _to: AddressLike,
      _deadline: BigNumberish
    ],
    [
      [bigint, bigint, bigint] & {
        amountA: bigint;
        amountB: bigint;
        lpAmount: bigint;
      }
    ],
    "nonpayable"
  >;

  depositVault: TypedContractMethod<
    [
      _collection: AddressLike[],
      _tokenId: BigNumberish[],
      _amount: BigNumberish[],
      _vault: AddressLike,
      _to: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;

  factory: TypedContractMethod<[], [string], "view">;

  getAmountIn: TypedContractMethod<
    [
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      pair: AddressLike
    ],
    [bigint],
    "view"
  >;

  getAmountOut: TypedContractMethod<
    [
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      pair: AddressLike
    ],
    [bigint],
    "view"
  >;

  getAmountsIn: TypedContractMethod<
    [amountOut: BigNumberish, path: AddressLike[]],
    [bigint[]],
    "view"
  >;

  getAmountsOut: TypedContractMethod<
    [amountIn: BigNumberish, path: AddressLike[]],
    [bigint[]],
    "view"
  >;

  pairFor: TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike],
    [string],
    "view"
  >;

  quote: TypedContractMethod<
    [amountA: BigNumberish, reserveA: BigNumberish, reserveB: BigNumberish],
    [bigint],
    "view"
  >;

  removeLiquidity: TypedContractMethod<
    [
      tokenA: AddressLike,
      tokenB: AddressLike,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: AddressLike,
      deadline: BigNumberish
    ],
    [[bigint, bigint] & { amountA: bigint; amountB: bigint }],
    "nonpayable"
  >;

  removeLiquidityETH: TypedContractMethod<
    [
      token: AddressLike,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: AddressLike,
      deadline: BigNumberish
    ],
    [[bigint, bigint] & { amountToken: bigint; amountETH: bigint }],
    "nonpayable"
  >;

  removeLiquidityETHWithPermit: TypedContractMethod<
    [
      token: AddressLike,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: AddressLike,
      deadline: BigNumberish,
      approveMax: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [[bigint, bigint] & { amountToken: bigint; amountETH: bigint }],
    "nonpayable"
  >;

  removeLiquidityNFT: TypedContractMethod<
    [
      _vault: IDojoSwapV2Router.NftVaultLiquidityDataStruct,
      _tokenB: AddressLike,
      _lpAmount: BigNumberish,
      _amountAMin: BigNumberish,
      _amountBMin: BigNumberish,
      _to: AddressLike,
      _deadline: BigNumberish,
      _swapLeftover: boolean
    ],
    [[bigint, bigint] & { amountA: bigint; amountB: bigint }],
    "nonpayable"
  >;

  removeLiquidityNFTETH: TypedContractMethod<
    [
      _vault: IDojoSwapV2Router.NftVaultLiquidityDataStruct,
      _lpAmount: BigNumberish,
      _amountTokenMin: BigNumberish,
      _amountETHMin: BigNumberish,
      _to: AddressLike,
      _deadline: BigNumberish,
      _swapLeftover: boolean
    ],
    [[bigint, bigint] & { amountToken: bigint; amountETH: bigint }],
    "nonpayable"
  >;

  removeLiquidityNFTNFT: TypedContractMethod<
    [
      _vaultA: IDojoSwapV2Router.NftVaultLiquidityDataStruct,
      _vaultB: IDojoSwapV2Router.NftVaultLiquidityDataStruct,
      _lpAmount: BigNumberish,
      _amountAMin: BigNumberish,
      _amountBMin: BigNumberish,
      _to: AddressLike,
      _deadline: BigNumberish
    ],
    [[bigint, bigint] & { amountA: bigint; amountB: bigint }],
    "nonpayable"
  >;

  removeLiquidityWithPermit: TypedContractMethod<
    [
      tokenA: AddressLike,
      tokenB: AddressLike,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: AddressLike,
      deadline: BigNumberish,
      approveMax: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [[bigint, bigint] & { amountA: bigint; amountB: bigint }],
    "nonpayable"
  >;

  swapETHForExactTokens: TypedContractMethod<
    [
      amountOut: BigNumberish,
      path: AddressLike[],
      to: AddressLike,
      deadline: BigNumberish
    ],
    [bigint[]],
    "payable"
  >;

  swapETHForNft: TypedContractMethod<
    [
      _collection: AddressLike[],
      _tokenId: BigNumberish[],
      _amount: BigNumberish[],
      _path: AddressLike[],
      _to: AddressLike,
      _deadline: BigNumberish
    ],
    [bigint[]],
    "payable"
  >;

  swapExactETHForTokens: TypedContractMethod<
    [
      amountOutMin: BigNumberish,
      path: AddressLike[],
      to: AddressLike,
      deadline: BigNumberish
    ],
    [bigint[]],
    "payable"
  >;

  swapExactTokensForETH: TypedContractMethod<
    [
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: AddressLike[],
      to: AddressLike,
      deadline: BigNumberish
    ],
    [bigint[]],
    "nonpayable"
  >;

  swapExactTokensForTokens: TypedContractMethod<
    [
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: AddressLike[],
      to: AddressLike,
      deadline: BigNumberish
    ],
    [bigint[]],
    "nonpayable"
  >;

  swapNftForETH: TypedContractMethod<
    [
      _collection: AddressLike[],
      _tokenId: BigNumberish[],
      _amount: BigNumberish[],
      _amountOutMin: BigNumberish,
      _path: AddressLike[],
      _to: AddressLike,
      _deadline: BigNumberish
    ],
    [bigint[]],
    "payable"
  >;

  swapNftForNft: TypedContractMethod<
    [
      _collectionIn: AddressLike[],
      _tokenIdIn: BigNumberish[],
      _amountIn: BigNumberish[],
      _collectionOut: AddressLike[],
      _tokenIdOut: BigNumberish[],
      _amountOut: BigNumberish[],
      _path: AddressLike[],
      _to: AddressLike,
      _deadline: BigNumberish
    ],
    [bigint[]],
    "nonpayable"
  >;

  swapNftForTokens: TypedContractMethod<
    [
      _collection: AddressLike[],
      _tokenId: BigNumberish[],
      _amount: BigNumberish[],
      _amountOutMin: BigNumberish,
      _path: AddressLike[],
      _to: AddressLike,
      _deadline: BigNumberish
    ],
    [bigint[]],
    "nonpayable"
  >;

  swapTokensForExactETH: TypedContractMethod<
    [
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: AddressLike[],
      to: AddressLike,
      deadline: BigNumberish
    ],
    [bigint[]],
    "nonpayable"
  >;

  swapTokensForExactTokens: TypedContractMethod<
    [
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: AddressLike[],
      to: AddressLike,
      deadline: BigNumberish
    ],
    [bigint[]],
    "nonpayable"
  >;

  swapTokensForNft: TypedContractMethod<
    [
      _collection: AddressLike[],
      _tokenId: BigNumberish[],
      _amount: BigNumberish[],
      _amountInMax: BigNumberish,
      _path: AddressLike[],
      _to: AddressLike,
      _deadline: BigNumberish
    ],
    [bigint[]],
    "nonpayable"
  >;

  withdrawVault: TypedContractMethod<
    [
      _collection: AddressLike[],
      _tokenId: BigNumberish[],
      _amount: BigNumberish[],
      _vault: AddressLike,
      _to: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BURN_ADDRESS"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ONE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "WETH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addLiquidity"
  ): TypedContractMethod<
    [
      tokenA: AddressLike,
      tokenB: AddressLike,
      amountADesired: BigNumberish,
      amountBDesired: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: AddressLike,
      deadline: BigNumberish
    ],
    [
      [bigint, bigint, bigint] & {
        amountA: bigint;
        amountB: bigint;
        liquidity: bigint;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addLiquidityETH"
  ): TypedContractMethod<
    [
      token: AddressLike,
      amountTokenDesired: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: AddressLike,
      deadline: BigNumberish
    ],
    [
      [bigint, bigint, bigint] & {
        amountToken: bigint;
        amountETH: bigint;
        liquidity: bigint;
      }
    ],
    "payable"
  >;
  getFunction(
    nameOrSignature: "addLiquidityNFT"
  ): TypedContractMethod<
    [
      _vault: IDojoSwapV2Router.NftVaultLiquidityDataStruct,
      _tokenB: AddressLike,
      _amountBDesired: BigNumberish,
      _amountBMin: BigNumberish,
      _to: AddressLike,
      _deadline: BigNumberish
    ],
    [
      [bigint, bigint, bigint] & {
        amountA: bigint;
        amountB: bigint;
        lpAmount: bigint;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addLiquidityNFTETH"
  ): TypedContractMethod<
    [
      _vault: IDojoSwapV2Router.NftVaultLiquidityDataStruct,
      _amountETHMin: BigNumberish,
      _to: AddressLike,
      _deadline: BigNumberish
    ],
    [
      [bigint, bigint, bigint] & {
        amountToken: bigint;
        amountETH: bigint;
        lpAmount: bigint;
      }
    ],
    "payable"
  >;
  getFunction(
    nameOrSignature: "addLiquidityNFTNFT"
  ): TypedContractMethod<
    [
      _vaultA: IDojoSwapV2Router.NftVaultLiquidityDataStruct,
      _vaultB: IDojoSwapV2Router.NftVaultLiquidityDataStruct,
      _amountAMin: BigNumberish,
      _amountBMin: BigNumberish,
      _to: AddressLike,
      _deadline: BigNumberish
    ],
    [
      [bigint, bigint, bigint] & {
        amountA: bigint;
        amountB: bigint;
        lpAmount: bigint;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositVault"
  ): TypedContractMethod<
    [
      _collection: AddressLike[],
      _tokenId: BigNumberish[],
      _amount: BigNumberish[],
      _vault: AddressLike,
      _to: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "factory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAmountIn"
  ): TypedContractMethod<
    [
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      pair: AddressLike
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAmountOut"
  ): TypedContractMethod<
    [
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      pair: AddressLike
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAmountsIn"
  ): TypedContractMethod<
    [amountOut: BigNumberish, path: AddressLike[]],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAmountsOut"
  ): TypedContractMethod<
    [amountIn: BigNumberish, path: AddressLike[]],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "pairFor"
  ): TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "quote"
  ): TypedContractMethod<
    [amountA: BigNumberish, reserveA: BigNumberish, reserveB: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeLiquidity"
  ): TypedContractMethod<
    [
      tokenA: AddressLike,
      tokenB: AddressLike,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: AddressLike,
      deadline: BigNumberish
    ],
    [[bigint, bigint] & { amountA: bigint; amountB: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeLiquidityETH"
  ): TypedContractMethod<
    [
      token: AddressLike,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: AddressLike,
      deadline: BigNumberish
    ],
    [[bigint, bigint] & { amountToken: bigint; amountETH: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeLiquidityETHWithPermit"
  ): TypedContractMethod<
    [
      token: AddressLike,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: AddressLike,
      deadline: BigNumberish,
      approveMax: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [[bigint, bigint] & { amountToken: bigint; amountETH: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeLiquidityNFT"
  ): TypedContractMethod<
    [
      _vault: IDojoSwapV2Router.NftVaultLiquidityDataStruct,
      _tokenB: AddressLike,
      _lpAmount: BigNumberish,
      _amountAMin: BigNumberish,
      _amountBMin: BigNumberish,
      _to: AddressLike,
      _deadline: BigNumberish,
      _swapLeftover: boolean
    ],
    [[bigint, bigint] & { amountA: bigint; amountB: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeLiquidityNFTETH"
  ): TypedContractMethod<
    [
      _vault: IDojoSwapV2Router.NftVaultLiquidityDataStruct,
      _lpAmount: BigNumberish,
      _amountTokenMin: BigNumberish,
      _amountETHMin: BigNumberish,
      _to: AddressLike,
      _deadline: BigNumberish,
      _swapLeftover: boolean
    ],
    [[bigint, bigint] & { amountToken: bigint; amountETH: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeLiquidityNFTNFT"
  ): TypedContractMethod<
    [
      _vaultA: IDojoSwapV2Router.NftVaultLiquidityDataStruct,
      _vaultB: IDojoSwapV2Router.NftVaultLiquidityDataStruct,
      _lpAmount: BigNumberish,
      _amountAMin: BigNumberish,
      _amountBMin: BigNumberish,
      _to: AddressLike,
      _deadline: BigNumberish
    ],
    [[bigint, bigint] & { amountA: bigint; amountB: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeLiquidityWithPermit"
  ): TypedContractMethod<
    [
      tokenA: AddressLike,
      tokenB: AddressLike,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: AddressLike,
      deadline: BigNumberish,
      approveMax: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [[bigint, bigint] & { amountA: bigint; amountB: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapETHForExactTokens"
  ): TypedContractMethod<
    [
      amountOut: BigNumberish,
      path: AddressLike[],
      to: AddressLike,
      deadline: BigNumberish
    ],
    [bigint[]],
    "payable"
  >;
  getFunction(
    nameOrSignature: "swapETHForNft"
  ): TypedContractMethod<
    [
      _collection: AddressLike[],
      _tokenId: BigNumberish[],
      _amount: BigNumberish[],
      _path: AddressLike[],
      _to: AddressLike,
      _deadline: BigNumberish
    ],
    [bigint[]],
    "payable"
  >;
  getFunction(
    nameOrSignature: "swapExactETHForTokens"
  ): TypedContractMethod<
    [
      amountOutMin: BigNumberish,
      path: AddressLike[],
      to: AddressLike,
      deadline: BigNumberish
    ],
    [bigint[]],
    "payable"
  >;
  getFunction(
    nameOrSignature: "swapExactTokensForETH"
  ): TypedContractMethod<
    [
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: AddressLike[],
      to: AddressLike,
      deadline: BigNumberish
    ],
    [bigint[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapExactTokensForTokens"
  ): TypedContractMethod<
    [
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: AddressLike[],
      to: AddressLike,
      deadline: BigNumberish
    ],
    [bigint[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapNftForETH"
  ): TypedContractMethod<
    [
      _collection: AddressLike[],
      _tokenId: BigNumberish[],
      _amount: BigNumberish[],
      _amountOutMin: BigNumberish,
      _path: AddressLike[],
      _to: AddressLike,
      _deadline: BigNumberish
    ],
    [bigint[]],
    "payable"
  >;
  getFunction(
    nameOrSignature: "swapNftForNft"
  ): TypedContractMethod<
    [
      _collectionIn: AddressLike[],
      _tokenIdIn: BigNumberish[],
      _amountIn: BigNumberish[],
      _collectionOut: AddressLike[],
      _tokenIdOut: BigNumberish[],
      _amountOut: BigNumberish[],
      _path: AddressLike[],
      _to: AddressLike,
      _deadline: BigNumberish
    ],
    [bigint[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapNftForTokens"
  ): TypedContractMethod<
    [
      _collection: AddressLike[],
      _tokenId: BigNumberish[],
      _amount: BigNumberish[],
      _amountOutMin: BigNumberish,
      _path: AddressLike[],
      _to: AddressLike,
      _deadline: BigNumberish
    ],
    [bigint[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapTokensForExactETH"
  ): TypedContractMethod<
    [
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: AddressLike[],
      to: AddressLike,
      deadline: BigNumberish
    ],
    [bigint[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapTokensForExactTokens"
  ): TypedContractMethod<
    [
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: AddressLike[],
      to: AddressLike,
      deadline: BigNumberish
    ],
    [bigint[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapTokensForNft"
  ): TypedContractMethod<
    [
      _collection: AddressLike[],
      _tokenId: BigNumberish[],
      _amount: BigNumberish[],
      _amountInMax: BigNumberish,
      _path: AddressLike[],
      _to: AddressLike,
      _deadline: BigNumberish
    ],
    [bigint[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawVault"
  ): TypedContractMethod<
    [
      _collection: AddressLike[],
      _tokenId: BigNumberish[],
      _amount: BigNumberish[],
      _vault: AddressLike,
      _to: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;

  getEvent(
    key: "NFTLiquidityAdded"
  ): TypedContractEvent<
    NFTLiquidityAddedEvent.InputTuple,
    NFTLiquidityAddedEvent.OutputTuple,
    NFTLiquidityAddedEvent.OutputObject
  >;
  getEvent(
    key: "NFTLiquidityRemoved"
  ): TypedContractEvent<
    NFTLiquidityRemovedEvent.InputTuple,
    NFTLiquidityRemovedEvent.OutputTuple,
    NFTLiquidityRemovedEvent.OutputObject
  >;
  getEvent(
    key: "NFTNFTLiquidityAdded"
  ): TypedContractEvent<
    NFTNFTLiquidityAddedEvent.InputTuple,
    NFTNFTLiquidityAddedEvent.OutputTuple,
    NFTNFTLiquidityAddedEvent.OutputObject
  >;
  getEvent(
    key: "NFTNFTLiquidityRemoved"
  ): TypedContractEvent<
    NFTNFTLiquidityRemovedEvent.InputTuple,
    NFTNFTLiquidityRemovedEvent.OutputTuple,
    NFTNFTLiquidityRemovedEvent.OutputObject
  >;

  filters: {
    "NFTLiquidityAdded(address,address,tuple)": TypedContractEvent<
      NFTLiquidityAddedEvent.InputTuple,
      NFTLiquidityAddedEvent.OutputTuple,
      NFTLiquidityAddedEvent.OutputObject
    >;
    NFTLiquidityAdded: TypedContractEvent<
      NFTLiquidityAddedEvent.InputTuple,
      NFTLiquidityAddedEvent.OutputTuple,
      NFTLiquidityAddedEvent.OutputObject
    >;

    "NFTLiquidityRemoved(address,address,tuple)": TypedContractEvent<
      NFTLiquidityRemovedEvent.InputTuple,
      NFTLiquidityRemovedEvent.OutputTuple,
      NFTLiquidityRemovedEvent.OutputObject
    >;
    NFTLiquidityRemoved: TypedContractEvent<
      NFTLiquidityRemovedEvent.InputTuple,
      NFTLiquidityRemovedEvent.OutputTuple,
      NFTLiquidityRemovedEvent.OutputObject
    >;

    "NFTNFTLiquidityAdded(address,address,tuple,tuple)": TypedContractEvent<
      NFTNFTLiquidityAddedEvent.InputTuple,
      NFTNFTLiquidityAddedEvent.OutputTuple,
      NFTNFTLiquidityAddedEvent.OutputObject
    >;
    NFTNFTLiquidityAdded: TypedContractEvent<
      NFTNFTLiquidityAddedEvent.InputTuple,
      NFTNFTLiquidityAddedEvent.OutputTuple,
      NFTNFTLiquidityAddedEvent.OutputObject
    >;

    "NFTNFTLiquidityRemoved(address,address,tuple,tuple)": TypedContractEvent<
      NFTNFTLiquidityRemovedEvent.InputTuple,
      NFTNFTLiquidityRemovedEvent.OutputTuple,
      NFTNFTLiquidityRemovedEvent.OutputObject
    >;
    NFTNFTLiquidityRemoved: TypedContractEvent<
      NFTNFTLiquidityRemovedEvent.InputTuple,
      NFTNFTLiquidityRemovedEvent.OutputTuple,
      NFTNFTLiquidityRemovedEvent.OutputObject
    >;
  };
}
