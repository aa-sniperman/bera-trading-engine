/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface MemeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BASIS_POINTS"
      | "MAX_TOKENS"
      | "UNIV3_FACTORY"
      | "factory"
      | "idUsed"
      | "initialBuy"
      | "initialize"
      | "listingFeeTier"
      | "listingSqrtPriceX96"
      | "native"
      | "nativeOffset"
      | "owner"
      | "quoteAmountIn"
      | "quoteAmountOut"
      | "renounceOwnership"
      | "reserveNative"
      | "reserveToken"
      | "reservedSupply"
      | "saleAmount"
      | "signerAddress"
      | "swapExactIn"
      | "swapExactOut"
      | "token"
      | "tokenOffset"
      | "transferOwnership"
      | "uniswapPair"
      | "uniswapV3MintCallback"
      | "whitelistBuyExactIn"
      | "whitelistBuyExactOut"
      | "whitelistEndTs"
      | "whitelistStartTs"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Buy"
      | "Initialized"
      | "List"
      | "ListingFeeCollected"
      | "OwnershipTransferred"
      | "Sell"
      | "TradingFeeCollected"
      | "WhitelistBuy"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BASIS_POINTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_TOKENS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UNIV3_FACTORY",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "idUsed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialBuy",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "listingFeeTier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "listingSqrtPriceX96",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "native", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nativeOffset",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "quoteAmountIn",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteAmountOut",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reserveNative",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reserveToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reservedSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "saleAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "signerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactIn",
    values: [BigNumberish, BigNumberish, boolean, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactOut",
    values: [BigNumberish, BigNumberish, boolean, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenOffset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapPair",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV3MintCallback",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistBuyExactIn",
    values: [
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistBuyExactOut",
    values: [
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistEndTs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistStartTs",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "BASIS_POINTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_TOKENS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "UNIV3_FACTORY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "idUsed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialBuy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "listingFeeTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listingSqrtPriceX96",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "native", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nativeOffset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quoteAmountIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reservedSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "saleAmount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "signerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenOffset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3MintCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistBuyExactIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistBuyExactOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistEndTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistStartTs",
    data: BytesLike
  ): Result;
}

export namespace BuyEvent {
  export type InputTuple = [
    trader: AddressLike,
    amountToken: BigNumberish,
    amountNative: BigNumberish,
    reserveToken: BigNumberish,
    reserveNative: BigNumberish,
    factory: AddressLike
  ];
  export type OutputTuple = [
    trader: string,
    amountToken: bigint,
    amountNative: bigint,
    reserveToken: bigint,
    reserveNative: bigint,
    factory: string
  ];
  export interface OutputObject {
    trader: string;
    amountToken: bigint;
    amountNative: bigint;
    reserveToken: bigint;
    reserveNative: bigint;
    factory: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ListEvent {
  export type InputTuple = [
    tokenLiquidity: BigNumberish,
    reserveLiquidity: BigNumberish,
    pair: AddressLike,
    factory: AddressLike
  ];
  export type OutputTuple = [
    tokenLiquidity: bigint,
    reserveLiquidity: bigint,
    pair: string,
    factory: string
  ];
  export interface OutputObject {
    tokenLiquidity: bigint;
    reserveLiquidity: bigint;
    pair: string;
    factory: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ListingFeeCollectedEvent {
  export type InputTuple = [
    token: AddressLike,
    feeRecipient: AddressLike,
    totalFee: BigNumberish,
    factory: AddressLike
  ];
  export type OutputTuple = [
    token: string,
    feeRecipient: string,
    totalFee: bigint,
    factory: string
  ];
  export interface OutputObject {
    token: string;
    feeRecipient: string;
    totalFee: bigint;
    factory: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SellEvent {
  export type InputTuple = [
    trader: AddressLike,
    amountToken: BigNumberish,
    amountNative: BigNumberish,
    reserveToken: BigNumberish,
    reserveNative: BigNumberish,
    factory: AddressLike
  ];
  export type OutputTuple = [
    trader: string,
    amountToken: bigint,
    amountNative: bigint,
    reserveToken: bigint,
    reserveNative: bigint,
    factory: string
  ];
  export interface OutputObject {
    trader: string;
    amountToken: bigint;
    amountNative: bigint;
    reserveToken: bigint;
    reserveNative: bigint;
    factory: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TradingFeeCollectedEvent {
  export type InputTuple = [
    token: AddressLike,
    treasury1: AddressLike,
    treasury2: AddressLike,
    totalFee: BigNumberish,
    feeForTreasury1: BigNumberish,
    feeForTreasury2: BigNumberish,
    reserveToken: BigNumberish,
    reserveNative: BigNumberish,
    isBuy: boolean,
    factory: AddressLike
  ];
  export type OutputTuple = [
    token: string,
    treasury1: string,
    treasury2: string,
    totalFee: bigint,
    feeForTreasury1: bigint,
    feeForTreasury2: bigint,
    reserveToken: bigint,
    reserveNative: bigint,
    isBuy: boolean,
    factory: string
  ];
  export interface OutputObject {
    token: string;
    treasury1: string;
    treasury2: string;
    totalFee: bigint;
    feeForTreasury1: bigint;
    feeForTreasury2: bigint;
    reserveToken: bigint;
    reserveNative: bigint;
    isBuy: boolean;
    factory: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WhitelistBuyEvent {
  export type InputTuple = [
    id: BigNumberish,
    amountBought: BigNumberish,
    factory: AddressLike
  ];
  export type OutputTuple = [id: bigint, amountBought: bigint, factory: string];
  export interface OutputObject {
    id: bigint;
    amountBought: bigint;
    factory: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Meme extends BaseContract {
  connect(runner?: ContractRunner | null): Meme;
  waitForDeployment(): Promise<this>;

  interface: MemeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BASIS_POINTS: TypedContractMethod<[], [bigint], "view">;

  MAX_TOKENS: TypedContractMethod<[], [bigint], "view">;

  UNIV3_FACTORY: TypedContractMethod<[], [string], "view">;

  factory: TypedContractMethod<[], [string], "view">;

  idUsed: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  initialBuy: TypedContractMethod<
    [amountIn: BigNumberish, recipient: AddressLike],
    [bigint],
    "nonpayable"
  >;

  initialize: TypedContractMethod<
    [
      _token: AddressLike,
      _native: AddressLike,
      _univ3Factory: AddressLike,
      _uniswapPair: AddressLike,
      _saleAmount: BigNumberish,
      _reservedSupply: BigNumberish,
      _tokenOffset: BigNumberish,
      _nativeOffset: BigNumberish,
      _whitelistStartTs: BigNumberish,
      _whitelistEndTs: BigNumberish,
      _listingSqrtPriceX96: BigNumberish,
      _listingFeeTier: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  listingFeeTier: TypedContractMethod<[], [bigint], "view">;

  listingSqrtPriceX96: TypedContractMethod<[], [bigint], "view">;

  native: TypedContractMethod<[], [string], "view">;

  nativeOffset: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  quoteAmountIn: TypedContractMethod<
    [amountOut: BigNumberish, isBuyToken: boolean],
    [
      [bigint, bigint, bigint] & {
        actualAmountOut: bigint;
        amountIn: bigint;
        nativeFee: bigint;
      }
    ],
    "view"
  >;

  quoteAmountOut: TypedContractMethod<
    [amountIn: BigNumberish, isBuyToken: boolean],
    [
      [bigint, bigint, bigint, bigint] & {
        actualAmountIn: bigint;
        amountOut: bigint;
        nativeFee: bigint;
        refund: bigint;
      }
    ],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  reserveNative: TypedContractMethod<[], [bigint], "view">;

  reserveToken: TypedContractMethod<[], [bigint], "view">;

  reservedSupply: TypedContractMethod<[], [bigint], "view">;

  saleAmount: TypedContractMethod<[], [bigint], "view">;

  signerAddress: TypedContractMethod<[], [string], "view">;

  swapExactIn: TypedContractMethod<
    [
      amountIn: BigNumberish,
      minimumReceive: BigNumberish,
      isBuyToken: boolean,
      recipient: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;

  swapExactOut: TypedContractMethod<
    [
      amountOut: BigNumberish,
      maximumPay: BigNumberish,
      isBuyToken: boolean,
      recipient: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;

  token: TypedContractMethod<[], [string], "view">;

  tokenOffset: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  uniswapPair: TypedContractMethod<[], [string], "view">;

  uniswapV3MintCallback: TypedContractMethod<
    [amount0Owed: BigNumberish, amount1Owed: BigNumberish, arg2: BytesLike],
    [void],
    "nonpayable"
  >;

  whitelistBuyExactIn: TypedContractMethod<
    [
      amountIn: BigNumberish,
      minimumReceive: BigNumberish,
      recipient: AddressLike,
      id: BigNumberish,
      tokenAllocation: BigNumberish,
      expiredBlockNumber: BigNumberish,
      signature: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  whitelistBuyExactOut: TypedContractMethod<
    [
      amountOut: BigNumberish,
      maximumPay: BigNumberish,
      recipient: AddressLike,
      id: BigNumberish,
      tokenAllocation: BigNumberish,
      expiredBlockNumber: BigNumberish,
      signature: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  whitelistEndTs: TypedContractMethod<[], [bigint], "view">;

  whitelistStartTs: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BASIS_POINTS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_TOKENS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "UNIV3_FACTORY"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "factory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "idUsed"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "initialBuy"
  ): TypedContractMethod<
    [amountIn: BigNumberish, recipient: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _token: AddressLike,
      _native: AddressLike,
      _univ3Factory: AddressLike,
      _uniswapPair: AddressLike,
      _saleAmount: BigNumberish,
      _reservedSupply: BigNumberish,
      _tokenOffset: BigNumberish,
      _nativeOffset: BigNumberish,
      _whitelistStartTs: BigNumberish,
      _whitelistEndTs: BigNumberish,
      _listingSqrtPriceX96: BigNumberish,
      _listingFeeTier: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "listingFeeTier"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "listingSqrtPriceX96"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "native"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nativeOffset"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "quoteAmountIn"
  ): TypedContractMethod<
    [amountOut: BigNumberish, isBuyToken: boolean],
    [
      [bigint, bigint, bigint] & {
        actualAmountOut: bigint;
        amountIn: bigint;
        nativeFee: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "quoteAmountOut"
  ): TypedContractMethod<
    [amountIn: BigNumberish, isBuyToken: boolean],
    [
      [bigint, bigint, bigint, bigint] & {
        actualAmountIn: bigint;
        amountOut: bigint;
        nativeFee: bigint;
        refund: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "reserveNative"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "reserveToken"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "reservedSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "saleAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "signerAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "swapExactIn"
  ): TypedContractMethod<
    [
      amountIn: BigNumberish,
      minimumReceive: BigNumberish,
      isBuyToken: boolean,
      recipient: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapExactOut"
  ): TypedContractMethod<
    [
      amountOut: BigNumberish,
      maximumPay: BigNumberish,
      isBuyToken: boolean,
      recipient: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenOffset"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "uniswapPair"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "uniswapV3MintCallback"
  ): TypedContractMethod<
    [amount0Owed: BigNumberish, amount1Owed: BigNumberish, arg2: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "whitelistBuyExactIn"
  ): TypedContractMethod<
    [
      amountIn: BigNumberish,
      minimumReceive: BigNumberish,
      recipient: AddressLike,
      id: BigNumberish,
      tokenAllocation: BigNumberish,
      expiredBlockNumber: BigNumberish,
      signature: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "whitelistBuyExactOut"
  ): TypedContractMethod<
    [
      amountOut: BigNumberish,
      maximumPay: BigNumberish,
      recipient: AddressLike,
      id: BigNumberish,
      tokenAllocation: BigNumberish,
      expiredBlockNumber: BigNumberish,
      signature: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "whitelistEndTs"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "whitelistStartTs"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "Buy"
  ): TypedContractEvent<
    BuyEvent.InputTuple,
    BuyEvent.OutputTuple,
    BuyEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "List"
  ): TypedContractEvent<
    ListEvent.InputTuple,
    ListEvent.OutputTuple,
    ListEvent.OutputObject
  >;
  getEvent(
    key: "ListingFeeCollected"
  ): TypedContractEvent<
    ListingFeeCollectedEvent.InputTuple,
    ListingFeeCollectedEvent.OutputTuple,
    ListingFeeCollectedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Sell"
  ): TypedContractEvent<
    SellEvent.InputTuple,
    SellEvent.OutputTuple,
    SellEvent.OutputObject
  >;
  getEvent(
    key: "TradingFeeCollected"
  ): TypedContractEvent<
    TradingFeeCollectedEvent.InputTuple,
    TradingFeeCollectedEvent.OutputTuple,
    TradingFeeCollectedEvent.OutputObject
  >;
  getEvent(
    key: "WhitelistBuy"
  ): TypedContractEvent<
    WhitelistBuyEvent.InputTuple,
    WhitelistBuyEvent.OutputTuple,
    WhitelistBuyEvent.OutputObject
  >;

  filters: {
    "Buy(address,uint256,uint256,uint256,uint256,address)": TypedContractEvent<
      BuyEvent.InputTuple,
      BuyEvent.OutputTuple,
      BuyEvent.OutputObject
    >;
    Buy: TypedContractEvent<
      BuyEvent.InputTuple,
      BuyEvent.OutputTuple,
      BuyEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "List(uint256,uint256,address,address)": TypedContractEvent<
      ListEvent.InputTuple,
      ListEvent.OutputTuple,
      ListEvent.OutputObject
    >;
    List: TypedContractEvent<
      ListEvent.InputTuple,
      ListEvent.OutputTuple,
      ListEvent.OutputObject
    >;

    "ListingFeeCollected(address,address,uint256,address)": TypedContractEvent<
      ListingFeeCollectedEvent.InputTuple,
      ListingFeeCollectedEvent.OutputTuple,
      ListingFeeCollectedEvent.OutputObject
    >;
    ListingFeeCollected: TypedContractEvent<
      ListingFeeCollectedEvent.InputTuple,
      ListingFeeCollectedEvent.OutputTuple,
      ListingFeeCollectedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Sell(address,uint256,uint256,uint256,uint256,address)": TypedContractEvent<
      SellEvent.InputTuple,
      SellEvent.OutputTuple,
      SellEvent.OutputObject
    >;
    Sell: TypedContractEvent<
      SellEvent.InputTuple,
      SellEvent.OutputTuple,
      SellEvent.OutputObject
    >;

    "TradingFeeCollected(address,address,address,uint256,uint256,uint256,uint256,uint256,bool,address)": TypedContractEvent<
      TradingFeeCollectedEvent.InputTuple,
      TradingFeeCollectedEvent.OutputTuple,
      TradingFeeCollectedEvent.OutputObject
    >;
    TradingFeeCollected: TypedContractEvent<
      TradingFeeCollectedEvent.InputTuple,
      TradingFeeCollectedEvent.OutputTuple,
      TradingFeeCollectedEvent.OutputObject
    >;

    "WhitelistBuy(uint256,uint256,address)": TypedContractEvent<
      WhitelistBuyEvent.InputTuple,
      WhitelistBuyEvent.OutputTuple,
      WhitelistBuyEvent.OutputObject
    >;
    WhitelistBuy: TypedContractEvent<
      WhitelistBuyEvent.InputTuple,
      WhitelistBuyEvent.OutputTuple,
      WhitelistBuyEvent.OutputObject
    >;
  };
}
