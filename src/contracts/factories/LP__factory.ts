/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type { LP, LPInterface } from "../LP";

const _abi = [
  {
    type: "function",
    name: "getPair",
    inputs: [
      {
        name: "tokenA",
        type: "address",
        internalType: "address",
      },
      {
        name: "tokenB",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "pair",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getReserves",
    inputs: [],
    outputs: [
      {
        name: "reserve0",
        type: "uint112",
        internalType: "uint112",
      },
      {
        name: "reserve1",
        type: "uint112",
        internalType: "uint112",
      },
      {
        name: "blockTimestampLast",
        type: "uint32",
        internalType: "uint32",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "mint",
    inputs: [
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "liquidity",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "nonpayable",
  },
] as const;

export class LP__factory {
  static readonly abi = _abi;
  static createInterface(): LPInterface {
    return new Interface(_abi) as LPInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): LP {
    return new Contract(address, _abi, runner) as unknown as LP;
  }
}
