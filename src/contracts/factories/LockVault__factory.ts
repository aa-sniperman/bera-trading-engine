/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type { LockVault, LockVaultInterface } from "../LockVault";

const _abi = [
  {
    type: "function",
    name: "claim",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "deposit",
    inputs: [
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "initialize",
    inputs: [
      {
        name: "_lockedToken",
        type: "address",
        internalType: "address",
      },
      {
        name: "_stakeEndTime",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "_lockEndTime",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "lockedToken",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract IERC20",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "userDeposit",
    inputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "event",
    name: "Claim",
    inputs: [
      {
        name: "claimer",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "claimAmount",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "totalDepositAfter",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "factory",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "Deposit",
    inputs: [
      {
        name: "depositor",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "depositAmount",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "userDepositAfter",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "totalDepositAfter",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "factory",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "Initialized",
    inputs: [
      {
        name: "version",
        type: "uint8",
        indexed: false,
        internalType: "uint8",
      },
    ],
    anonymous: false,
  },
] as const;

export class LockVault__factory {
  static readonly abi = _abi;
  static createInterface(): LockVaultInterface {
    return new Interface(_abi) as LockVaultInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): LockVault {
    return new Contract(address, _abi, runner) as unknown as LockVault;
  }
}
